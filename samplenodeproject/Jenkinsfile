pipeline {
    agent any
    environment {
        MINIKUBE_HOME = '/var/lib/jenkins'
    }
    stages {
        stage('Initialize') {
            steps {
                echo 'Starting pipeline'
            }
        }

        stage('Run Stages in Subdirectory') {
            steps {
                script {
                    // Helper for running stages in samplenodeproject/
                    def runInMyDir = { stageName, body ->
                        stage(stageName) {
                            dir('samplenodeproject') {
                                body()
                            }
                        }
                    }

                    runInMyDir('Set Docker Env for Minikube') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            docker info
                        '''
                    }

                    runInMyDir('Build Docker Image') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            docker build -t nodeapp .
                        '''
                    }

                    runInMyDir('Test') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            echo "testing..."
                            docker inspect --type=image nodeapp:latest
                        '''
                    }

                    runInMyDir('Deploy to Minikube') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                            if [ -f ingress.yaml ]; then
                                kubectl apply -f ingress.yaml
                            fi
                        '''
                    }

                    runInMyDir('Verify Deployment') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            echo "Waiting for pod to be ready..."
                            kubectl rollout status deployment/nodeapp-deployment --timeout=60s
                            kubectl get pods
                            kubectl get svc
                        '''
                    }

                    runInMyDir('Teardown Previous Deployments (Optional)') {
                        sh '''
                            export MINIKUBE_HOME=/var/lib/jenkins
                            eval $(minikube docker-env)
                            echo "Cleaning up old resources..."
                            kubectl delete deployment nodeapp-deployment --ignore-not-found
                            kubectl delete service nodeapp-service --ignore-not-found
                            if [ -f ingress.yaml ]; then
                                kubectl delete -f ingress.yaml --ignore-not-found
                            fi
                        '''
                    }
                }
            }
        }
    }
}
