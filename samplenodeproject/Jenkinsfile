pipeline {
    agent any

    environment {
        APP_VM = "51.145.115.179"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/LCox3236/QA-DockerandJenkins'
            }
        }

        stage('Install & Test') {
            steps {
                sh '''
                cd samplenodeproject
                echo "Installing dependencies and running tests..."
                npm install
                npm test
                '''
            }
        }

        stage('Terraform Init & Plan') {
            steps {
                input "Plan Terraform changes?" // Manual approval (optional)
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                    echo "Initializing Terraform..."
                    pwd
                    cd terraform
                    terraform init
                    terraform plan -out=tfplan
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                input "Apply Terraform changes?" // Manual approval (optional)
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        echo "Applying Terraform changes..."
                        dir(TERRAFORM_DIR) {
                            // Apply Terraform plan and save output
                            sh 'terraform apply -auto-approve tfplan'
                            
                            // Capture the output IP address and save it as a Jenkins environment variable
                            def ip = sh(script: 'terraform output -raw public_ip', returnStdout: true).trim()
                            
                            // Save the IP address to a Jenkins environment variable
                            env.PUBLIC_IP = ip
                            echo "Public IP: ${env.PUBLIC_IP}"
                        }
                    }
                }
            }
        }


        stage('Deploy App') {
            steps {
                sshagent(credentials: ['azuressh']) {
                    sh '''
                    # Ensure the target directory exists on the remote server
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null azureuser@${APP_VM} "sudo mkdir -p /var/www/calculator && sudo chown azureuser:azureuser /var/www/calculator"

                    # Deploy the application (copying the contents of samplenodeproject)
                    scp -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ./samplenodeproject/* azureuser@${APP_VM}:/var/www/calculator

                    # Install Node.js and npm if they are missing
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null azureuser@${APP_VM} "
                    sudo rm -f /etc/apt/sources.list.d/kubernetes.list
                    sudo apt update
                    sudo apt install -y nodejs npm
                    "

                    # Start the Node.js app in the background using nohup
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null azureuser@${APP_VM} "
                    cd /var/www/calculator && npm install && nohup npm start &"
                    
                    # Restart nginx to apply changes
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null azureuser@${APP_VM} "sudo systemctl restart nginx"
                    '''
                }
            }
        }


        stage('Verify Deployment') {
            steps {
                sh '''
                echo "Verifying deployment..."
                curl -f http://${APP_VM}:80 || exit 1
                '''
            }
        }
    }

    post {
        success {
            echo '✅ Deployment successful!'
        }
        failure {
            echo '❌ Deployment failed!'
        }
    }
}
